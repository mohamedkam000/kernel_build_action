name: 'Android Kernel Build Action'

branding:
  icon: 'activity'
  color: 'blue'

inputs:
  kernel-url:
    required: true
  depth:
    required: false
    default: 1
  vendor:
    required: false
    default: false
  vendor-url:
    required: false
  kernel-dir:
    required: false
    default: kernel
  vendor-dir:
    required: false
    default: vendor
  kernel-branch:
    required: false
    default: main
  vendor-branch:
    required: false
    default: main
  config:
    required: true
    default: defconfig
  arch:
    required: true
    default: arm64
  android-version:
    required: false
  ksu:
    required: false
    default: false
  rekernel:
    required: false
    default: false
  ksu-version:
    required: false
    default: "main"
  ksu-other:
    required: false
    default: false
  ksu-url:
    required: false
  ksu-lkm:
    required: false
    default: false
  disable-lto:
    required: false
    default: false
  kvm:
    required: false
    default: false
  ccache:
    required: false
    default: false
  aosp-gcc:
    required: false
    default: false
  other-gcc32-url:
    required: false
  other-gcc32-branch:
    required: false
    default: main
  other-gcc64-url:
    required: false
  other-gcc64-branch:
    required: false
    default: main
  aosp-clang:
    required: false
    default: true
  aosp-clang-version:
    required: false
    default: "r547379"
  other-clang-url:
    required: false
  other-clang-branch:
    required: false
    default: main
  anykernel3:
    required: false
    default: true
  anykernel3-url:
    required: false
  bootimg-url:
    required: false
  release:
    required: false
    default: false
  access-token:
    required: false
  extra-cmd:
    required: false

runs:
  using: 'composite'
  steps:

    - name: Build Kernel
      shell: bash
      run: |
        #!/bin/bash
        set -euo pipefail

        # Function to display error messages and exit
        error() {
            echo "Error: $1" >&2
            exit 1
        }

        # Function to run a command with sudo if not already root
        SU() {
            if [ "$(id -u)" -eq 0 ]; then
                "$@"
            else
                sudo "$@"
            fi
        }

        # Function to download and extract a file
        download_and_extract() {
            local url=$1
            local output_name=$2
            local extract_dir=$3
            local branch=${4:-main}

            mkdir -p -v "$extract_dir"
            case "$url" in
                *.zip)
                    aria2c -o "${output_name}.zip" "$url"
                    unzip -q "${output_name}.zip" -d "$extract_dir"
                    ;;
                *.tar.*|*.gz|*.xz|*.bz2)
                    aria2c -o "${output_name}.${url##*.}" "$url"
                    tar -C "$extract_dir" -xf "${output_name}.${url##*.}"
                    ;;
                *)
                    git clone --depth="${{ inputs.depth }}" -b "$branch" "$url" "$extract_dir"
                    ;;
            esac
        }

        # Install dependencies
        echo "::group::Installing Building Depend Packages"
        SU apt-get update
        SU apt-get install --no-install-recommends -y \
            binutils git make bc bison openssl curl zip kmod cpio flex libelf-dev \
            libssl-dev libtfm-dev libc6-dev device-tree-compiler ca-certificates \
            python3 xz-utils aria2 build-essential pigz coccinelle parallel
        echo "::endgroup::"

        # Download and set up the toolchain
        if [ "${{ inputs.aosp-clang }}" == "true" ]; then
            echo "::group::Downloading AOSP Clang"
            AOSP_CLANG_URL="https://android.googlesource.com/platform/prebuilts/clang/host/linux-x86/+archive/refs/heads/main/clang-r547379.tar.gz"
            download_and_extract "$AOSP_CLANG_URL" "aosp-clang" "$HOME/clang"
            echo "::endgroup::"
        else
            SU apt-get install -y clang lld binutils-aarch64-linux-gnu binutils-arm-linux-gnuabeihf
        fi

        # Clone the kernel source
        echo "::group::Pulling Kernel Source"
        git clone --recursive -b "${{ inputs.kernel-branch }}" --depth="${{ inputs.depth }}" "${{ inputs.kernel-url }}" "kernel/${{ inputs.kernel-dir }}"
        echo "::endgroup::"

        cd "kernel/${{ inputs.kernel-dir }}"

        # Disable LTO if specified
        if [ "${{ inputs.disable-lto }}" == "true" ]; then
            if grep -q "LTO" "arch/${{ inputs.arch }}/configs/${{ inputs.config }}"; then
                sed -i 's/CONFIG_LTO=y/CONFIG_LTO=n/' "arch/${{ inputs.arch }}/configs/${{ inputs.config }}"
                sed -i 's/CONFIG_LTO_CLANG=y/CONFIG_LTO_CLANG=n/' "arch/${{ inputs.arch }}/configs/${{ inputs.config }}"
                sed -i 's/CONFIG_THINLTO=y/CONFIG_THINLTO=n/' "arch/${{ inputs.arch }}/configs/${{ inputs.config }}"
                echo "CONFIG_LTO_NONE=y" >> "arch/${{ inputs.arch }}/configs/${{ inputs.config }}"
            fi
        fi

        # Build the kernel
         echo "::group:: Building Kernel with selected cross compiler"
         EXTRA_CMD="${{ inputs.extra-cmd }}"
         if [[ -n "$EXTRA_CMD" && ! "$EXTRA_CMD" =~ ^[a-zA-Z0-9_=+./,\ -]*$ ]]; then
             echo "::error::extra-cmd contains invalid characters. Only letters, digits, _=+./,- and spaces are allowed." >&2
             exit 1
         fi
         read -r -a EXTRA_ARGS <<< "$EXTRA_CMD"
         EXTRA_ARG="${EXTRA_ARGS[@]}"
         mkdir out -p -v

         COMMAND="make -j$(nproc --all) ${{ inputs.config }} ARCH=${{ inputs.arch }} all $EXTRA_ARG O=out"

         if [ -d "$HOME/clang/bin" ]; then
              CMD_PATH="$HOME/clang/bin"
              CMD_CC="clang"
         else
              CMD_CC="/usr/bin/clang"
              CMD_CROSS_COMPILE="/usr/bin/aarch64-linux-gnu-"
              CMD_CLANG_TRIPLE="aarch64-linux-gnu-"
         fi

         # setup additional commands
         COMMAND+=" PATH=${CMD_PATH}:${PATH} CROSS_COMPILE=${CMD_CROSS_COMPILE} CROSS_COMPILE_ARM32=${CMD_CROSS_COMPILE_ARM32} CLANG_TRIPLE=${CMD_CLANG_TRIPLE} CC=${CMD_CC}"

         # run the command
         ${COMMAND}

         echo "::endgroup::"

         unset CMD_PATH CMD_CC CMD_CLANG_TRIPLE CMD_CROSS_COMPILE CMD_CROSS_COMPILE_ARM32 USE_CCACHE CLANG_TRIPLE CROSS_COMPILE_ARM32 CROSS_COMPILE CLANG_PATH HOMES KVER COMMAND SWAP_FILE SUBLEVEL PATCHLEVEL VERSION GCC_DIR FILE FILE_NAME MATCHED_DIR FOLDER FOLDER_NAME GCC64 GCC32 NEED_GCC AOSP_CLANG_URL OTHER_CLANG_URL AOSP_GCC64_URL AOSP_GCC32_URL AOSP_GCC_BRANCH OTHER_GCC64_URL OTHER_GCC32_URL EXTRA_CMD

        # Package the kernel output
        if [ "${{ inputs.anykernel3 }}" == "false" ]; then
            echo "::group::Packaging boot.img"

            # Validate bootimg-url is provided
            if [ -z "${{ inputs.bootimg-url }}" ]; then
                error "bootimg-url is required when anykernel3 is false"
            fi

            mkdir split
            cd split
            HOST_ARCH=$(dpkg --print-architecture)
            case "${HOST_ARCH}" in
                armv7*|armv8l|arm64|armhf|arm) aria2c https://github.com/Shubhamvis98/AIK/raw/4ac321dfd48e16344e6146c505708aa720ff0bb3/bin/magiskboot_arm -o magiskboot && chmod +x magiskboot ;;
                i*86|x86|amd64|x86_64) aria2c https://github.com/Shubhamvis98/AIK/raw/4ac321dfd48e16344e6146c505708aa720ff0bb3/bin/magiskboot_x86 -o magiskboot && chmod +x magiskboot ;;
                *) error "Unknown CPU architecture for this device!" ;;
            esac
            aria2c "${{ inputs.bootimg-url }}" -o boot.img || error "Failed to download boot.img"
            ./magiskboot unpack boot.img >/dev/null 2>&1 || error "Failed to unpack boot.img"
            rm -f kernel
            FMT=$(./magiskboot decompress < ../out/arch/${{ inputs.arch }}/boot/Image 2>/dev/null | head -n 1 | cut -d ' ' -f 2)
            if [ "$FMT" == "raw" ]; then
                if ! find ../out/arch/${{ inputs.arch }}/boot -name "Image" ! -name "*-*" -exec cp -v {} kernel \; 2>/dev/null; then
                    error "Failed to find kernel Image"
                fi
            else
                if [ -f dtb ]; then
                    if ! find ../out/arch/${{ inputs.arch }}/boot -name "Image.*-dtb" ! -name "*-*" -exec cp -v {} kernel \; 2>/dev/null; then
                        error "Failed to find kernel Image with dtb"
                    fi
                else
                    if ! find ../out/arch/${{ inputs.arch }}/boot -name "Image.*" ! -name "*-*" -exec cp -v {} kernel \; 2>/dev/null; then
                        error "Failed to find compressed kernel Image"
                    fi
                fi
            fi
            ./magiskboot repack boot.img || error "Failed to repack boot.img"
            rm -f boot.img
            mkdir -p ../../../build
            find . -name "*.img" -exec mv -v {} ../../../build/boot.img \;
            cd ..
            echo "::endgroup::"
        else
            echo "::group:: Packaging Anykernel3 flasher"
            if [ -n "${{ inputs.anykernel3-url }}" ]; then
                git clone "${{ inputs.anykernel3-url }}" AnyKernel3
            else
                git clone https://github.com/osm0sis/AnyKernel3
                sed -i 's!BLOCK=/dev/block/platform/omap/omap_hsmmc.0/by-name/boot;!BLOCK=auto;!g' AnyKernel3/anykernel.sh
                sed -i 's/do.devicecheck=1/do.devicecheck=0/g' AnyKernel3/anykernel.sh
                sed -i 's/IS_SLOT_DEVICE=0;/IS_SLOT_DEVICE=auto;/g' AnyKernel3/anykernel.sh
            fi

            if [ -f out/arch/${{ inputs.arch }}/boot/Image.*-dtb ]; then
                if ! find out/arch/${{ inputs.arch }}/boot -name "Image.*-dtb" -exec cp -rv {} AnyKernel3/ \; 2>/dev/null; then
                    error "Failed to copy kernel Image with dtb"
                fi
            elif [ -f out/arch/${{ inputs.arch }}/boot/Image.* ]; then
                if ! find out/arch/${{ inputs.arch }}/boot -name "Image.*" ! -name "Image.*-dtb" -exec cp -rv {} AnyKernel3/ \; 2>/dev/null; then
                    error "Failed to copy compressed kernel Image"
                fi
            else
                if [ ! -f out/arch/${{ inputs.arch }}/boot/Image ]; then
                    error "Kernel Image not found"
                fi
                cp out/arch/${{ inputs.arch }}/boot/Image AnyKernel3/ -rv
            fi

            if [ -f out/arch/${{ inputs.arch }}/boot/dtbo.img ]; then
                cp out/arch/${{ inputs.arch }}/boot/dtbo.img AnyKernel3/ -rv
            else
                echo "Failed to copy DTBO image. File not found."
            fi

            if [ -f out/arch/${{ inputs.arch }}/boot/dtb.img ]; then
                cp out/arch/${{ inputs.arch }}/boot/dtb.img AnyKernel3/ -rv
            elif [ -f out/arch/${{ inputs.arch }}/boot/dtb ]; then
                cp out/arch/${{ inputs.arch }}/boot/dtb AnyKernel3/ -rv
            else
                echo "Failed to copy dtb. File not found."
            fi

            rm -rf -v AnyKernel3/.git* AnyKernel3/README.md
            mkdir -p -v ../../build
            if [ "${{ inputs.release }}" = "false" ]; then
                cp -r -v AnyKernel3/* ../../build
            else
                cd AnyKernel3 && zip -r Anykernel3-flasher.zip ./* && mv -v Anykernel3-flasher.zip .. && cd .. && mv -v Anykernel3-flasher.zip ../../build/
            fi
            echo "::endgroup::"
        fi

    - id: uploadi
      if: ${{ inputs.release == 'false' && inputs.anykernel3 == 'false' }}
      uses: actions/upload-artifact@v4
      with:
        name: kernel-built-bootimg
        path: build/*
        if-no-files-found: error
        overwrite: true

    - id: uploada
      if: ${{ inputs.release == 'false' && inputs.anykernel3 == 'true' }}
      uses: actions/upload-artifact@v4
      with:
        name: Anykernel3-flasher
        path: build/*
        if-no-files-found: error
        overwrite: true

    - id: release
      if: inputs.release == 'true'
      uses: softprops/action-gh-release@v2
      env:
        GITHUB_TOKEN: ${{ inputs.access-token }}
      with:
        name: Last CI build kernel
        tag_name: last-ci-${{ github.sha }}
        files: build/*
        make_latest: true
        body: |
          Build Information:
          - Config: ${{ inputs.config }}
          - Branch: ${{ inputs.kernel-branch }}
          - Source: ${{ inputs.kernel-url }}
          - Architecture: ${{ inputs.arch }}

          Features:
          - KVM: ${{ inputs.kvm }}

          Build Details:
          - Timestamp: ${{ github.event.repository.updated_at }}
          - Workflow: ${{ github.workflow }}
          - Run ID: ${{ github.run_id }}
          - Commit: ${{ github.sha }}
