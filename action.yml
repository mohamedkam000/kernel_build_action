name: 'Android Kernel Build Action'

branding:
  icon: 'activity'
  color: 'red'

inputs:
  kernel-url:
    required: true
  depth:
    required: false
    default: 1
  vendor:
    required: false
    default: false
  vendor-url:
    required: false
  kernel-dir:
    required: false
    default: kernel
  vendor-dir:
    required: false
    default: vendor
  kernel-branch:
    required: false
    default: main
  config:
    required: true
    default: defconfig
  arch:
    required: true
    default: arm64
  disable-lto:
    required: false
    default: false
  aosp-clang:
    required: false
    default: true
  anykernel3:
    required: false
    default: true
  anykernel3-url:
    required: false
  extra-cmd:
    required: false

runs:
  using: 'composite'
  steps:

    - name: Build Kernel
      shell: bash
      run: |
        #!/bin/bash
        set -euo pipefail

        error() {
            echo "Error: $1" >&2
            exit 1
        }

        SU() {
            if [ "$(id -u)" -eq 0 ]; then
                "$@"
            else
                sudo "$@"
            fi
        }

        download_and_extract() {
            local url=$1
            local output_name=$2
            local extract_dir=$3
            local branch=${4:-main}

            mkdir -p -v "$extract_dir"
            case "$url" in
                *.zip)
                    aria2c -o "${output_name}.zip" "$url"
                    unzip -q "${output_name}.zip" -d "$extract_dir"
                    ;;
                *.tar.*|*.gz|*.xz|*.bz2)
                    aria2c -o "${output_name}.${url##*.}" "$url"
                    tar -C "$extract_dir" -xf "${output_name}.${url##*.}"
                    ;;
                *)
                    git clone --depth="${{ inputs.depth }}" -b "$branch" "$url" "$extract_dir"
                    ;;
            esac
        }

        # Install dependencies
        echo "::group::Installing Building Depend Packages"
        SU apt-get update
        SU apt-get install --no-install-recommends -y \
            binutils git make bc bison openssl curl zip kmod cpio flex libelf-dev \
            libssl-dev libtfm-dev libc6-dev device-tree-compiler ca-certificates \
            python3 xz-utils aria2 build-essential pigz coccinelle parallel
        echo "::endgroup::"

        if [ "${{ inputs.aosp-clang }}" == "true" ]; then
            echo "::group::Downloading AOSP Clang"
            AOSP_CLANG_URL="https://android.googlesource.com/platform/prebuilts/clang/host/linux-x86/+archive/refs/heads/main/clang-r547379.tar.gz"
            download_and_extract "$AOSP_CLANG_URL" "aosp-clang" "$HOME/clang"
            echo "::endgroup::"
        fi

        echo "::group:: Cloning Kernel Source"
        git clone --recursive -b "${{ inputs.kernel-branch }}" --depth="${{ inputs.depth }}" "${{ inputs.kernel-url }}" "kernel/${{ inputs.kernel-dir }}"
        echo "::endgroup::"

        cd "kernel/${{ inputs.kernel-dir }}"

         echo "::group:: Building Kernel"
         EXTRA_CMD="${{ inputs.extra-cmd }}"
         if [[ -n "$EXTRA_CMD" && ! "$EXTRA_CMD" =~ ^[a-zA-Z0-9_=+./,\ -]*$ ]]; then
             echo "::error::extra-cmd contains invalid characters. Only letters, digits, _=+./,- and spaces are allowed." >&2
             exit 1
         fi
         read -r -a EXTRA_ARGS <<< "$EXTRA_CMD"
         EXTRA_ARG="${EXTRA_ARGS[@]}"
         mkdir out -p -v

         COMMAND="make -j$(nproc --all) ${{ inputs.config }} ARCH=${{ inputs.arch }} all $EXTRA_ARG O=out"

         if [ -d "$HOME/clang/bin" ]; then
              CMD_PATH="$HOME/clang/bin"
              CMD_CC="clang"
         fi

         # setup additional commands
         COMMAND+=" PATH=${CMD_PATH}:${PATH} CC=${CMD_CC}"

         # run the command
         ${COMMAND}

         echo "::endgroup::"

         unset CMD_PATH CMD_CC USE_CCACHE CLANG_TRIPLE CROSS_COMPILE_ARM32 CROSS_COMPILE CLANG_PATH HOMES KVER COMMAND SWAP_FILE SUBLEVEL PATCHLEVEL VERSION GCC_DIR FILE FILE_NAME MATCHED_DIR FOLDER FOLDER_NAME GCC64 GCC32 NEED_GCC AOSP_CLANG_URL OTHER_CLANG_URL AOSP_GCC64_URL AOSP_GCC32_URL AOSP_GCC_BRANCH OTHER_GCC64_URL OTHER_GCC32_URL EXTRA_CMD

        # Package the kernel output
        if [ "${{ inputs.anykernel3 }}" == "true" ]; then
            echo "::group:: Packaging Anykernel3 flasher"
            if [ -n "${{ inputs.anykernel3-url }}" ]; then
                git clone "${{ inputs.anykernel3-url }}" AnyKernel3
            else
                git clone https://github.com/osm0sis/AnyKernel3
                sed -i 's!BLOCK=/dev/block/platform/omap/omap_hsmmc.0/by-name/boot;!BLOCK=auto;!g' AnyKernel3/anykernel.sh
                sed -i 's/do.devicecheck=1/do.devicecheck=0/g' AnyKernel3/anykernel.sh
                sed -i 's/IS_SLOT_DEVICE=0;/IS_SLOT_DEVICE=auto;/g' AnyKernel3/anykernel.sh
            fi

            if [ -f out/arch/${{ inputs.arch }}/boot/Image.* ]; then
                if ! find out/arch/${{ inputs.arch }}/boot -name "Image.*" ! -name "Image.*-dtb" -exec cp -rv {} AnyKernel3/ \; 2>/dev/null; then
                    error "Failed to copy compressed kernel Image"
                fi
            else
                if [ ! -f out/arch/${{ inputs.arch }}/boot/Image ]; then
                    error "Kernel Image not found"
                fi
                cp out/arch/${{ inputs.arch }}/boot/Image AnyKernel3/ -rv
            fi

            rm -rf -v AnyKernel3/.git* AnyKernel3/README.md
            mkdir -p -v ../../build
            if [ "${{ inputs.release }}" = "false" ]; then
                cp -r -v AnyKernel3/* ../../build
            else
                cd AnyKernel3 && zip -r Anykernel3-flasher.zip ./* && mv -v Anykernel3-flasher.zip .. && cd .. && mv -v Anykernel3-flasher.zip ../../build/
            fi
            echo "::endgroup::"
        fi

    - id: uploada
      if: ${{ inputs.release == 'false' && inputs.anykernel3 == 'true' }}
      uses: actions/upload-artifact@v4
      with:
        name: Anykernel3-flasher
        path: build/*
        if-no-files-found: error
        overwrite: true
